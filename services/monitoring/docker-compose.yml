version: "3.7"

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}

networks:
  internal:
    driver: overlay
    attachable: true
  monitored:
    name: ${MONITORED_NETWORK}
    external: true
  public:
    external: true
    name: ${PUBLIC_NETWORK}

configs:
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  alertmanager_config:
    file: ./alertmanager/config.yml
  node_exporter_entrypoint:
    file: ./node-exporter/docker-entrypoint.sh
services:
  prometheus:
    dns: 
      8.8.8.8
    image: prom/prometheus:v2.18.1
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_DOMAIN}/prometheus/"
      - "--web.route-prefix=/"
    ports:
      - "9090"
    depends_on:
      - cadvisor
    networks:
      - internal
      - monitored
      - public
    extra_hosts: []
    #logging:
    #  driver: gelf
    #  options:
    #    gelf-address: "tcp://127.0.0.1:12201"
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheus`)
        - traefik.http.routers.prometheus.entrypoints=https
        - traefik.http.routers.prometheus.tls=true
        # Let's encrypt use-case
        # - traefik.http.routers.prometheus.tls.certresolver=lehttpchallenge
        - traefik.http.middlewares.prometheus_stripprefixregex.stripprefixregex.regex=^/prometheus
        - traefik.http.routers.prometheus.middlewares=ops_whitelist_ips@docker, ops_auth@docker, ops_gzip@docker, prometheus_stripprefixregex
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 64M

  dockerd-exporter:
    # the docker engine(s) need to set the following in /etc/docker/daemon.json to provide prometheus metrics:
    # {"metrics-addr": "0.0.0.0:9323",
    # "experimental": true}
    image: stefanprodan/caddy
    networks:
      - internal
    environment:
      # Replace 172.18.0.1 with the docker_gwbridge address
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: prom/node-exporter:v0.18.1
    volumes:
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /etc/hostname:/etc/nodename # doesn't work with windows
    configs:
      - source: node_exporter_entrypoint
        target: /docker-entrypoint.sh
    environment:
      - NODE_ID={{.Node.ID}}
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.textfile.directory=/home/"
      - "--collector.meminfo_numa"
      - "--no-collector.ipvs"
    entrypoint:
      - /bin/sh
      - /docker-entrypoint.sh
    networks:
      - internal
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  nvidia-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    networks:
      - internal
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
          generic_resources:
            - discrete_resource_spec:
                kind: "VRAM"
                value: 1

  alertmanager:
    image: prom/alertmanager:v0.20.0
    ports:
      - "9093"
    volumes:
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    networks:
      - internal
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/config.yml
    deploy:
      placement:
        constraints:
          - node.role==manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.35.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080"
    networks:
      - internal
      - monitored
    command: -logtostderr -docker_only
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  postgres-exporter:
    image: bitnami/postgres-exporter:0.8.0
    ports:
      - "9187"
    networks:
      - internal
      - monitored
    environment:
      - DATA_SOURCE_NAME=${POSTGRES_EXPORTER_DATA_SOURCE_NAME}
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121"
    networks:
      - internal
      - monitored
    environment:
      - REDIS_ADDR=${REDIS_EXPORTER_DATA_SOURCE_NAME}
      - REDIS_EXPORTER_CHECK_KEYS=user_id*client_session_id*alive, user_id*client_session_id*resources
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
  grafana:
    dns: 
      8.8.8.8
    image: grafana/grafana:7.0.0
    depends_on:
      - prometheus
    ports:
      - "3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    networks:
      - internal
      - monitored # needed to access postgres
      - public
    deploy:
      placement:
        constraints:
          - node.role==manager
      #restart_policy:
      #  condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.entrypoints=https
        - traefik.http.routers.grafana.tls=true
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.regex=^/grafana/?(.*)$$
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.replacement=/$${1}
        - traefik.http.routers.grafana.middlewares=ops_whitelist_ips@docker, ops_gzip@docker, grafana_replace_regex
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana-image-renderer:
    image: grafana/grafana-image-renderer:latest
    environment:
      ENABLE_METRICS: "true"
      RENDERING_MODE: clustered
      RENDERING_CLUSTERING_MODE: context
      RENDERING_CLUSTERING_MAX_CONCURRENCY: 5
    ports:
      - "8081"
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 64M
