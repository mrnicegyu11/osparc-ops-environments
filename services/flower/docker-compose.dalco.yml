version: '3.7'
services:
  staging_flower:
    image: mher/flower:0.9.5
    init: true
    ports:
      - 5555
    networks:
      - monitored
      - public
    environment:
      - CELERY_BROKER_URL=amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@staging_rabbit:${RABBIT_PORT}
      - FLOWER_URL_PREFIX=staging_flower
      - FLOWER_BROKER_API=http://${RABBIT_USER}:${RABBIT_PASSWORD}@staging_rabbit:15672/api/
      - FLOWER_PORT=5555
    
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.staging_flower.loadbalancer.server.port=5555
        - traefik.http.routers.staging_flower.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/staging_flower`)
        - traefik.http.routers.staging_flower.entrypoints=https
        - traefik.http.routers.staging_flower.tls=true
        - traefik.http.routers.staging_flower.tls.certresolver=myresolver
        - traefik.http.routers.staging_flower.middlewares=ops_whitelist_ips@docker, ops_auth@docker, ops_gzip@docker
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  production_flower:
    image: mher/flower:0.9.5
    init: true
    ports:
      - 5555
    networks:
      - monitored
      - public
    environment:
      - CELERY_BROKER_URL=amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@${RABBIT_HOST}:${RABBIT_PORT}
      - FLOWER_URL_PREFIX=production_flower
      - FLOWER_BROKER_API=http://${RABBIT_USER}:${RABBIT_PASSWORD}@${RABBIT_HOST}:15672/api/
      - FLOWER_PORT=5555
    
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.flower.loadbalancer.server.port=5555
        - traefik.http.routers.flower.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/production_flower`)
        - traefik.http.routers.flower.entrypoints=https
        - traefik.http.routers.flower.tls=true
        - traefik.http.routers.flower.tls.certresolver=myresolver
        - traefik.http.routers.flower.middlewares=ops_whitelist_ips@docker, ops_auth@docker, ops_gzip@docker
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
networks:
  public:
    external: true
    name: ${PUBLIC_NETWORK}
  monitored:
    name: ${MONITORED_NETWORK}
    external: true
