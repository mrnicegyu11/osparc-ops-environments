version: "3.7"

services:
  portus:
    image: opensuse/portus:head # 2.4.3 does not allow for nested images key
    init: true
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}
      # - PORTUS_SECURITY_CLAIR_SERVER=http://clair:6060 this seems to slow things down
      - PORTUS_CHECK_SSL_USAGE_ENABLED="false"

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_DB_HOST=db
      - PORTUS_DB_DATABASE=portus_production
      - PORTUS_DB_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      # which will be used for to encrypt and sign sessions
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      # used to generate the private key for JWT requests
      - PORTUS_KEY_PATH=/certificates/portus.key
      # the password of the special portus user
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # Deleting
      - PORTUS_DELETE_ENABLED=true

      # Since we have no nginx in insecure mode, portus have to
      # serve the static files
      - RAILS_SERVE_STATIC_FILES='true'
    networks:
      - internal
      - public
    volumes:
      - portus_static_data:/srv/Portus/public
    secrets:
      - source: portus.key
        target: /certificates/portus.key

    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.portus.loadbalancer.server.port=3000
        - traefik.http.routers.portus.rule=Host(`${MACHINE_FQDN}`) && PathPrefix(`/`)
        - traefik.http.routers.portus.entrypoints=https
        - traefik.http.routers.portus.tls=true
        - traefik.http.routers.portus.priority=10
        - traefik.http.routers.portus.middlewares=ops_whitelist_ips@docker, ops_gzip@docker
        - traefik.http.routers.portus_token.rule=Host(`${MACHINE_FQDN}`) && PathPrefix(`/v2/token`)
        - traefik.http.routers.portus_token.entrypoints=https
        - traefik.http.routers.portus_token.tls=true
        - traefik.http.routers.portus_token.priority=40
        - traefik.http.routers.portus_token.middlewares=ops_whitelist_ips@docker, ops_gzip@docker
  background:
    image: opensuse/portus:head
    init: true
    depends_on:
      - portus
      - db
    environment:
      # Theoretically not needed, but cconfig's been buggy on this...
      - CCONFIG_PREFIX=PORTUS
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}
      # - PORTUS_SECURITY_CLAIR_SERVER=http://clair:6060
      - PORTUS_CHECK_SSL_USAGE_ENABLED="false"

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_DB_HOST=db
      - PORTUS_DB_DATABASE=portus_production
      - PORTUS_DB_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/portus.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      - PORTUS_BACKGROUND=true
    networks:
      - internal
    secrets:
      - source: portus.key
        target: /certificates/portus.key

  db:
    image: library/mariadb:10.0.23
    init: true
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0
    environment:
      - MYSQL_DATABASE=portus_production

      # Again, the password shouldn't be handled like this.
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - internal
    # deploy:
    #   placement:
    #     constraints:
    #       - node.labels.postgres==true

  registry:
    image: library/registry:2.7
    init: true
    command: ["/bin/sh", "/etc/docker/registry/init"]
    environment:
      # set to true if using self-signed certificates
      UPDATE_CERTIFICATES: "false"
      # Authentication
      REGISTRY_AUTH_TOKEN_REALM: https://${MACHINE_FQDN}:5000/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: ${MACHINE_FQDN}:5000
      REGISTRY_AUTH_TOKEN_ISSUER: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /secrets/portus.crt
      # REGISTRY_LOG_LEVEL: debug
      # Storage
      REGISTRY_STORAGE: s3
      REGISTRY_STORAGE_S3_ACCESSKEY: ${S3_ACCESSKEY}
      REGISTRY_STORAGE_S3_SECRETKEY: ${S3_SECRETKEY}
      REGISTRY_STORAGE_S3_REGION: "us-east-1"
      REGISTRY_STORAGE_S3_REGIONENDPOINT: ${S3_ENDPOINT}
      REGISTRY_STORAGE_S3_SECURE: ${S3_SECURE}
      REGISTRY_STORAGE_S3_BUCKET: ${S3_REGISTRY_BUCKET}
      REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR: inmemory
      REGISTRY_STORAGE_REDIRECT_DISABLE: "true"
      REGISTRY_STORAGE_DELETE_ENABLED: "true"

      REGISTRY_HTTP_SECRET: ${SECRET_KEY_BASE}
      # Metrics
      REGISTRY_HTTP_DEBUG_ADDR: ":5001"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_ENABLED: "true"
      REGISTRY_HTTP_DEBUG_PROMETHEUS_PATH: "/metrics"

      # neded as it creates problems when the bucket is non existing??
      REGISTRY_HEALTH_STORAGEDRIVER_ENABLED: "false"

      # Portus endpoint
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: http://portus:3000/v2/webhooks/events
          timeout: 5000ms
          threshold: 5
          backoff: 1s
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.registry.loadbalancer.server.port=5000
        # - traefik.http.services.registry.loadbalancer.healthcheck.path=/minio/health/ready
        - traefik.http.routers.registry.rule=Host(`${MACHINE_FQDN}`) && PathPrefix(`/v2`)
        - traefik.http.routers.registry.entrypoints=https
        - traefik.http.routers.registry.tls=true
        - traefik.http.routers.registry.priority=20
        - traefik.http.routers.registry.middlewares=ops_whitelist_ips@docker, ops_gzip@docker
    volumes:
      - registry_data:/var/lib/registry
    configs:
      - source: registry_init
        target: /etc/docker/registry/init
        mode: 0755
      - source: nsswitch_conf
        target: /etc/nsswitch.conf
        mode: 0644
    networks:
      - internal
      - public
      - monitored
    secrets:
      - source: portus.crt
        target: /secrets/portus.crt

volumes:
  portus_static_data:
  registry_data:
  mariadb_data:

networks:
  default:
  internal:
  public:
    external: true
    name: ${PUBLIC_NETWORK}
  monitored:
    name: ${MONITORED_NETWORK}
    external: true

configs:
  registry_config.yml:
    file: ./registry/config.yml
  nsswitch_conf:
    file: ./registry/nsswitch.conf
  registry_init:
    file: ./registry/init

secrets:
  portus.key:
    file: secrets/portus.key
  portus.crt:
    file: secrets/portus.crt
